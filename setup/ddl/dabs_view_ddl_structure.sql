-- DABS.BANKBRANCHES source

CREATE VIEW DABS.BANKBRANCHES AS
SELECT
    *
FROM
    CENTRAL_ALL.BANKBRANCHES
WHERE
    PROVINCE IS NULL;


-- DABS.BILLING_SCHEDULE source

CREATE OR REPLACE
VIEW DABS.BILLING_SCHEDULE AS
SELECT
    ROWNUM AS ID,
    ZONE_NAME,
    ACTIVITY,
    OFFICE_ID,
    AREA_ID,
    DTR_ID,
    POLE_ID,
    START_DATE,
    END_DATE,
    GRACE_DAYS,
    FINAL_DATE,
    PREALERT_DAYS,
    ALERT_TYPE,
    CREATED_BY,
    CREATE_DATE,
    UPDATED_BY,
    UPDATE_DATE,
    SOURCE_OFFICE_ID,
    TARGET_OFFICE_ID,
    SCREEN_ID,
    MODULE_ID,
    SUBMODULE_ID,
    RECORD_STATUS,
    DB_IP_ADDRESS,
    MONTH,
    YEAR,
    FLAG1,
    FLAG2,
    FLAG3,
    FLAG4,
    FLAG5,
    METER_DAY,
    CHECK_CONDITION,
    ROUTE_CODE,
    ROUTE_CODE_DHARI,
    ROUTE_CYCLE,
    ROUTE_CYCLE_DHARI,
    PRST_RDG_DATE,
    FROM_SEQUENCE
FROM
    (
    SELECT
        DISTINCT ZONE_NAME,
        '1000-2' ACTIVITY,
        OFFICE_ID,
        AREA_ID,
        DTR_ID,
        POLE_ID,
        SYSDATE START_DATE,
        SYSDATE END_DATE,
        0 AS GRACE_DAYS,
        SYSDATE FINAL_DATE,
        0 AS PREALERT_DAYS,
        NULL ALERT_TYPE,
        '99' CREATED_BY,
        SYSDATE CREATE_DATE,
        NULL UPDATED_BY,
        SYSDATE UPDATE_DATE,
        NULL SOURCE_OFFICE_ID,
        NULL TARGET_OFFICE_ID,
        'VIEW' SCREEN_ID,
        NULL MODULE_ID,
        NULL SUBMODULE_ID,
        RECORD_STATUS,
        'DB' DB_IP_ADDRESS,
        MONTH(SYSDATE) AS MONTH,
        YEAR(SYSDATE) AS YEAR,
        '1' FLAG1,
        FLAG2,
        FLAG3,
        NULL FLAG4,
        NULL FLAG5,
        NULL METER_DAY,
        NULL AS CHECK_CONDITION,
        ROUTE_CODE,
        ROUTE_CODE_DHARI,
        '05' || ROUTE_CODE ROUTE_CYCLE,
        '05' || ROUTE_CODE_DHARI ROUTE_CYCLE_DHARI,
        NULL PRST_RDG_DATE,
        NULL FROM_SEQUENCE
    FROM
        CENTRAL_ALL.BILLING_SCHEDULE
    WHERE
        OFFICE_ID IN (
        SELECT
            ID
        FROM
            CENTRAL_ALL.CMTOFFICE_M
        WHERE
            PARENTOFFICE_ID = '200')
        AND RECORD_STATUS = 'ACTIVE') WITH NO ROW MOVEMENT;


-- DABS.CMTAREA_M source

CREATE VIEW DABS.CMTAREA_M AS
SELECT
    *
FROM
    CENTRAL_ALL.CMTAREA_M A
WHERE
    EXISTS (
    SELECT
        1
    FROM
        DABS.CMTOFFICE_M
    WHERE
        ID = A.OFFICE_ID);


-- DABS.CMTCONSUMER_M source

CREATE VIEW DABS.CMTCONSUMER_M AS
SELECT
    *
FROM
    CENTRAL_ALL.CMTCONSUMER_M
WHERE
    OFFICE_ID IN (
    SELECT
        ID
    FROM
        CENTRAL_ALL.CMTOFFICE_M
    WHERE
        PARENTOFFICE_ID = '200');


-- DABS.CMTEMPLOYEE_M source

CREATE OR REPLACE
VIEW DABS.CMTEMPLOYEE_M ( ID,
CODE,
SERVICE_NO,
DESIG_ID,
USER_ID,
FIRST_NAME,
MIDDLE_NAME,
LAST_NAME,
FATHER_OR_HUSBAND_NAME,
OFFICE_ID,
DOOR_NO,
STREET,
AREA,
CITY,
PINCODE,
PHONE1,
PHONE2,
EMAIL,
BIRTH_DATE,
SEX,
HIRE_DATE,
JOINING_DATE,
RETIRING_DATE,
TERMINATION_DATE,
LATEST_DESIG_ID,
LATEST_OFFICE_ID,
REPORTINGTO_ID,
REPORTINGOFFICE_ID,
STATUS,
CREATE_DATE,
CREATED_BY,
UPDATED_BY,
UPDATE_DATE,
DB_IP_ADDRESS,
SOURCE_OFFICE_ID,
TARGET_OFFICE_ID,
RECORD_STATUS,
SCREEN_ID,
MONTH,
YEAR,
FLAG1,
FLAG2,
FLAG3,
FLAG4,
FLAG5,
CHECK_CONDITION,
CHECK_CONDITION1,
MODULE_ID,
SUBMODULE_ID,
MR_FLAG,
BANK_NAME,
BANK_AC,
PAN_NO,
DEPT_ID,
APPOINTMENT_NO,
APPOINTMENT_DT,
APPOINTMENT_HOST,
PER_MARKS_IDENTITY,
GRADE,
GRADE_DT,
SENIORITY_NO,
CPF_NO,
GPF_NO,
WWS_NO,
KKS_NO,
SCNO,
PHC,
PHC_PER,
ESI_NUMBER,
PENSION_STATUS,
PENSION_NOMINEE,
PRESENT_BASIC,
PENSION_ACNO,
SERVICE_MODE,
REJOIN_DATE,
ACTIVATION_CODE,
ACTIVATION_FLAG,
CALL_CENTER ) AS
SELECT
    ID,
    EMPLOYEECODE,
    SERVICE_NO,
    DESIG_ID,
    USERID,
    FIRST_NAME,
    MIDDLE_NAME,
    LAST_NAME,
    FATHER_OR_HUSBAND_NAME,
    OFFICE_ID,
    DOOR_NO,
    STREET,
    AREA,
    CITY,
    PINCODE,
    PHONE1,
    PHONE2,
    EMAIL,
    BIRTH_DATE,
    SEX,
    HIRE_DATE,
    STARTDATE,
    ENDDATE,
    TERMINATION_DATE,
    LATEST_DESIG_ID,
    LATEST_OFFICE_ID,
    REPORTINGTO_ID,
    REPORTINGOFFICE_ID,
    STATUS,
    CREATE_DATE,
    CREATED_BY,
    UPDATED_BY,
    UPDATE_DATE,
    DB_IP_ADDRESS,
    SOURCE_OFFICE_ID,
    TARGET_OFFICE_ID,
    RECORD_STATUS,
    SCREEN_ID,
    MONTH,
    YEAR,
    FLAG1,
    FLAG2,
    FLAG3,
    FLAG4,
    FLAG5,
    CHECK_CONDITION,
    CHECK_CONDITION1,
    MODULE_ID,
    SUBMODULE_ID,
    MR_FLAG,
    BANK_NAME,
    BANK_AC,
    PAN_NO,
    DEPARTMENTID,
    APPOINTMENT_NO,
    APPOINTMENT_DT,
    APPOINTMENT_HOST,
    PER_MARKS_IDENTITY,
    GRADEID,
    GRADE_DT,
    SENIORITY_NO,
    CPF_NO,
    GPF_NO,
    WWS_NO,
    KKS_NO,
    SCNO,
    PHC,
    PHC_PER,
    ESI_NUMBER,
    PENSION_STATUS,
    PENSION_NOMINEE,
    PRESENT_BASIC,
    PENSION_ACNO,
    SERVICE_MODE,
    REJOIN_DATE,
    ACTIVATION_CODE,
    ACTIVATION_FLAG,
    CALL_CENTER
FROM
    JWDB.DIR_EMPLOYMENT WITH NO ROW MOVEMENT;


-- DABS.CMTOFFICE_M source

CREATE OR REPLACE
VIEW DABS.CMTOFFICE_M AS
SELECT
    CMO.ID,
    CMO.CODE,
    DECODE(CMO.NAME,
    'KABUL',
    'KED',
    CMO.NAME) NAME,
    CMO.OFFICETYPE_ID,
    CMO.PARENTOFFICE_ID,
    CMO.EROOFFICE_ID,
    CMO.RESPONSIBLEPERSON_ID,
    CMO.DOOR_NO,
    CMO.AREA,
    CMO.STREET,
    CMO.CITY,
    CMO.PHONE1,
    CMO.PHONE2,
    CMO.PHONE3,
    CMO.FAX,
    CMO.EMAIL,
    CMO.CREATE_DATE,
    CMO.CREATED_BY,
    CMO.UPDATED_BY,
    CMO.UPDATE_DATE,
    CMO.DB_IP_ADDRESS,
    CMO.SOURCE_OFFICE_ID,
    CMO.TARGET_OFFICE_ID,
    CMO.RECORD_STATUS,
    CMO.SCREEN_ID,
    CMO.MONTH,
    CMO.YEAR,
    CMO.FLAG1,
    CMO.FLAG2,
    CMO.FLAG3,
    CMO.FLAG4,
    CMO.FLAG5,
    CMO.CHECK_CONDITION,
    CMO.CHECK_CONDITION1,
    CMO.TIMING_FRHR,
    CMO.TIMING_FRMI,
    CMO.TIMING_TOHR,
    CMO.TIMING_TOMI,
    CMO.MODULE_ID,
    CMO.SUBMODULE_ID,
    CMO.UCODE,
    CMO.IS_NETWORKED,
    CMO.AUTHENTICATION_NUMBER,
    CMO.OLD_UCODE
FROM
    COMMON_USER.CMTOFFICE_M CMO
WHERE
    PARENTOFFICE_ID IN ('-2',
    '246',
    '200');


-- DABS.CMTOTHER_CONFIG_M source

CREATE OR REPLACE
VIEW DABS.CMTOTHER_CONFIG_M AS
SELECT
    *
FROM
    CENTRAL_ALL.CMTOTHER_CONFIG_M
WHERE
    PROVIENCE = '200';


-- DABS.CMTUSER_M source

CREATE OR REPLACE
VIEW DABS.CMTUSER_M ( ID,
LOGIN_ID,
PASSWORD,
SECRET_QUESTION,
SECRET_ANSWER,
IS_USER_LOGGED_IN,
NO_OF_SESSIONS,
LOGIN_TIME,
LAST_LOGGED_IN_TIME,
STATUS,
CREATED_BY,
CREATE_DATE,
UPDATED_BY,
UPDATE_DATE,
DB_IP_ADDRESS,
SOURCE_OFFICE_ID,
TARGET_OFFICE_ID,
RECORD_STATUS,
SCREEN_ID,
MONTH,
YEAR,
FLAG1,
FLAG2,
FLAG3,
FLAG4,
FLAG5,
CHECK_CONDITION,
MODULE_ID,
SUBMODULE_ID,
TRANS_PASSWORD,
REMARKS,
PWD_UPDATE_DATE,
BLOCK_FROM_IP,
LOCALE_ID,
BANK_CODE,
BRANCH_CODE,
PWD_CHANGE_DATE,
CALL_CENTER,
BANK_NAME,
OLD_PASSWORD,
EMAIL,
SUPERVISOR_DAYS,
MAX_AMOUNT ) AS
SELECT
    ID,
    USERNAME,
    PASSWORD,
    SECRET_QUESTION,
    SECRET_ANSWER,
    IS_USER_LOGGED_IN,
    NO_OF_SESSIONS,
    LOGIN_TIME,
    LAST_LOGGED_IN_TIME,
    ACTIVE,
    CREATED_BY,
    CREATE_DATE,
    UPDATED_BY,
    UPDATE_DATE,
    DB_IP_ADDRESS,
    SOURCE_OFFICE_ID,
    TARGET_OFFICE_ID,
    RECORD_STATUS,
    SCREEN_ID,
    MONTH,
    YEAR,
    FLAG1,
    FLAG2,
    FLAG3,
    FLAG4,
    FLAG5,
    CHECK_CONDITION,
    MODULE_ID,
    SUBMODULE_ID,
    TRANS_PASSWORD,
    REMARKS,
    PWD_UPDATE_DATE,
    BLOCK_FROM_IP,
    LOCALE_ID,
    BANK_CODE,
    BRANCH_CODE,
    PWD_CHANGE_DATE,
    CALL_CENTER,
    BANK_NAME,
    OLD_PASSWORD,
    EMAIL,
    SUPERVISOR_DAYS,
    MAX_AMOUNT
FROM
    JWDB.DIR_USER WITH NO ROW MOVEMENT;


-- DABS.CMTUSER_OFFICE_REL_T source

CREATE VIEW DABS.CMTUSER_OFFICE_REL_T AS
SELECT
    *
FROM
    COMMON_USER.CMTUSER_OFFICE_REL_T A
WHERE
    EXISTS (
    SELECT
        ID
    FROM
        DABS.CMTOFFICE_M
    WHERE
        ID = A.JUNCTION);


-- DABS.CONSGRP_DETAILS source

CREATE OR REPLACE
VIEW DABS.CONSGRP_DETAILS AS
SELECT
    ID,
    MAINGRP_ID,
    CONS_NUM,
    CREATED_BY,
    CREATE_DATE,
    UPDATED_BY,
    UPDATE_DATE,
    DB_IP_ADDRESS,
    SOURCE_OFFICE_ID,
    TARGET_OFFICE_ID,
    RECORD_STATUS,
    SCREEN_ID,
    MONTH,
    YEAR,
    FLAG1,
    FLAG2,
    FLAG3,
    FLAG4,
    FLAG5,
    MODULE_ID,
    SUBMODULE_ID,
    CHECK_CONDITION,
    CHILDGRP_ID,
    ISBILLED,
    BILLMONTH,
    BILLYEAR
FROM
    CENTRAL_ALL.CONSGRP_DETAILS CG
WHERE
    EXISTS (
    SELECT
        ID
    FROM
        DABS.CMTCONSUMER_M
    WHERE
        ID = CG.CONS_NUM);


-- DABS.CUSTOMER_VIEW source

CREATE VIEW DABS.CUSTOMER_VIEW ( JUNCTION,
CITY_CODE,
READER_CODE,
READ_DAY,
DOMAIN_CODE,
RBA,
FORM_SERIAL,
NAME,
FATHER_NAME,
ADDRESS,
CALCULATION_CODE,
PLAK_NO,
TRANSFORMER,
TRANSFORMER_LAT,
TRANSFORMER_LONG,
FEEDERNO,
METER_BOX,
METERBOX_LAT,
METERBOX_LONG,
MTRNO,
PHASE,
MF,
CUSTOMERADDRESS_GEOCODE,
CUSTOMERADDRESS_LAT,
CUSTOMERADDRESS_LONG,
METERROUTE,
METERREADERNAME ) AS
SELECT
    (
    SELECT
        NAME
    FROM
        CMTOFFICE_M OFF1
    WHERE
        OFF1.ID = CMT.OFFICE_ID) JUNCTION,
    SUBSTR(SCNO,
    1,
    2) AS CITY_CODE,
    (
    SELECT
        MTR_RDR_NO
    FROM
        MTS_MTR_RDR_M
    WHERE
        RECORD_STATUS = 'ACTIVE'
        AND ID = CMT.BINDER_NO ) AS READER_CODE,
    SUBSTR(SCNO,
    5,
    2) AS READ_DAY,
    SUBSTR(SCNO,
    7) AS DOMAIN_CODE,
    OLD_SCNO AS RBA,
    GEN_SCNO AS FORM_SERIAL,
    NAME,
    FATHER_NAME,
    ADDRESS_1 AS ADDRESS ,
    (
    SELECT
        CAT_CODE
    FROM
        NCTCATEGORY_M NCTCAT
    WHERE
        NCTCAT.ID = CMT.CATEGORY) CALCULATION_CODE,
    ACCOUNT_NO AS PLAK_NO,
    DTR.DTR_CODE AS TRANSFORMER,
    DTR.Transformer_Lat,
    DTR.Transformer_Long,
    (
    SELECT
        FEEDER_CODE
    FROM
        FEEDER_M
    WHERE
        RECORD_STATUS = 'ACTIVE'
        AND ID = DTR.FEEDER_ID) AS FEEDERNO,
    POL.POLE_NUM METER_BOX,
    POL.METERBOX_LAT,
    POL.METERBOX_LONG,
    MTRNO,
    CMT.PHASE,
    MF_KWH AS MF,
    GEOCODE AS CustomerAddress_GeoCode,
    GIS_LAT AS CustomerAddress_Lat,
    GIS_LONG AS CustomerAddress_Long ,
    ROUTE AS MeterRoute ,
    (
    SELECT
        MTR_RDR_NAME
    FROM
        MTS_MTR_RDR_M
    WHERE
        RECORD_STATUS = 'ACTIVE'
        AND ID = CMT.BINDER_NO ) AS MeterReaderName
FROM
    CMTCONSUMER_M CMT,
    DTR_M DTR,
    POLE_M POL
WHERE
    DTR.ID = CMT.TRANS_LOCATION
    AND POL.ID = CMT.POL_NUM
    AND CMT.RECORD_STATUS = 'ACTIVE'
    AND DTR.RECORD_STATUS = 'ACTIVE'
    AND POL.RECORD_STATUS = 'ACTIVE' WITH NO ROW MOVEMENT;


-- DABS.DTR_M source

CREATE VIEW DABS.DTR_M AS
SELECT
    *
FROM
    CENTRAL_ALL.DTR_M A
WHERE
    EXISTS (
    SELECT
        1
    FROM
        DABS.CMTOFFICE_M
    WHERE
        ID = A.OFFICE_ID);


-- DABS.IDX33332_V source

CREATE VIEW "DABS    "."IDX33332_V"("K00") AS
SELECT
    TO_NUMBER(DHARI_YEAR)|| '0' || TO_NUMBER(CYCLE)
FROM
    "DABS    "."TRACK_MISS_CYCLES_NEW_RDG_MATCH";


-- DABS.IDX33333_V source

CREATE VIEW "DABS    "."IDX33333_V"("K00") AS
SELECT
    TO_NUMBER(DHARI_YEAR)|| '0' || TO_NUMBER(CYCLE)
FROM
    "DABS    "."TRACK_MISS_CYCLES_NEW_BKP";


-- DABS.IDX_MOB_LTMTR_DHARI_YEAR_CYCLE_V source

CREATE VIEW "DABS    "."IDX_MOB_LTMTR_DHARI_YEAR_CYCLE_V"("K00") AS
SELECT
    TO_NUMBER(DHARI_YEAR || CYCLE)
FROM
    "DABS    "."MOB_LTMTR_RDG_III_T";


-- DABS.LOGACT_REPORT source

CREATE VIEW LOGACT_REPORT AS
SELECT
    COUNT(CREATED_BY) AS TOTAL_NO_OF_ACTIVITIES,
    (
    SELECT
        NVL(FIRST_NAME,
        '')|| NVL(MIDDLE_NAME,
        '')|| NVL(LAST_NAME,
        '')
    FROM
        CMTEMPLOYEE_M
    WHERE
        USER_ID = A.CREATED_BY) AS CREATED_BY,
    (
    SELECT
        LOGIN_ID
    FROM
        CMTUSER_M
    WHERE
        ID = A.CREATED_BY ) AS LOGIN_ID,
    (
    SELECT
        NAME
    FROM
        SGTROLE_M
    WHERE
        ID = (
        SELECT
            ROLE_ID
        FROM
            SGTROLEUSERREL_M
        WHERE
            USER_ID = A.CREATED_BY)) AS ROLE,
    TRUNC(CREATE_DATE) AS CREATE_DATE,
    MIN(CREATE_DATE) AS MIN_TIME_OF_THE_DAY,
    MAX(CREATE_DATE) AS MAX_TIME_OF_THE_DAY,
    'RDG ENRY' AS ACTIVITY
FROM
    LTMTR_RDG_III_T A
WHERE
    TRUNC(CREATE_DATE) BETWEEN TRUNC(SYSDATE-7) AND TRUNC(SYSDATE)
    AND RECORD_STATUS = 'ACTIVE'
GROUP BY
    CREATED_BY,
    TRUNC(CREATE_DATE)
UNION ALL
SELECT
    COUNT(UPDATED_BY) TOTAL_NO_OF_ACTIVITIES,
    (
    SELECT
        NVL(FIRST_NAME,
        '')|| NVL(MIDDLE_NAME,
        '')|| NVL(LAST_NAME,
        '')
    FROM
        CMTEMPLOYEE_M
    WHERE
        USER_ID = A.UPDATED_BY) CREATED_BY,
    (
    SELECT
        LOGIN_ID
    FROM
        CMTUSER_M
    WHERE
        ID = A.UPDATED_BY )AS LOGIN_ID,
    (
    SELECT
        NAME
    FROM
        SGTROLE_M
    WHERE
        ID = (
        SELECT
            ROLE_ID
        FROM
            SGTROLEUSERREL_M
        WHERE
            USER_ID = A.UPDATED_BY)) AS ROLE,
    TRUNC(UPDATE_DATE) AS CREATE_DATE,
    MIN(CREATE_DATE) AS MIN_TIME_OF_THE_DAY,
    MAX(CREATE_DATE) AS MAX_TIME_OF_THE_DAY,
    'ANOMALIE APPROVAL' AS ACTIVITY
FROM
    LTMTR_RDG_III_T A
WHERE
    TRUNC(UPDATE_DATE) BETWEEN TRUNC(SYSDATE-7) AND TRUNC(SYSDATE)
    AND NVL(UPDATED_BY,
    '0') != '0'
    AND UPDATED_BY IS NOT NULL
    AND RECORD_STATUS = 'ACTIVE'
GROUP BY
    UPDATED_BY,
    TRUNC(UPDATE_DATE)
UNION ALL
SELECT
    COUNT(CREATED_BY) TOTAL_NO_OF_ACTIVITIES,
    (
    SELECT
        NVL(FIRST_NAME,
        '')|| NVL(MIDDLE_NAME,
        '')|| NVL(LAST_NAME,
        '')
    FROM
        CMTEMPLOYEE_M
    WHERE
        USER_ID = A.CREATED_BY) CREATED_BY,
    (
    SELECT
        LOGIN_ID
    FROM
        CMTUSER_M
    WHERE
        ID = A.CREATED_BY ) AS LOGIN_ID,
    (
    SELECT
        NAME
    FROM
        SGTROLE_M
    WHERE
        ID = (
        SELECT
            ROLE_ID
        FROM
            SGTROLEUSERREL_M
        WHERE
            USER_ID = A.CREATED_BY)) AS ROLE,
    TRUNC(CREATE_DATE) AS CREATE_DATE,
    MIN(CREATE_DATE) AS MIN_TIME_OF_THE_DAY,
    MAX(CREATE_DATE) AS MAX_TIME_OF_THE_DAY,
    'REVISION' AS ACTIVITY
FROM
    LTBILLREVISION_T A
WHERE
    TRUNC(CREATE_DATE) BETWEEN TRUNC(SYSDATE-7) AND TRUNC(SYSDATE)
    AND RECORD_STATUS = 'ACTIVE'
GROUP BY
    CREATED_BY,
    TRUNC(CREATE_DATE)
UNION ALL
SELECT
    COUNT(UPDATED_BY) TOTAL_NO_OF_ACTIVITIES,
    (
    SELECT
        NVL(FIRST_NAME,
        '')|| NVL(MIDDLE_NAME,
        '')|| NVL(LAST_NAME,
        '')
    FROM
        CMTEMPLOYEE_M
    WHERE
        USER_ID = A.UPDATED_BY) CREATED_BY,
    (
    SELECT
        LOGIN_ID
    FROM
        CMTUSER_M
    WHERE
        ID = A.UPDATED_BY ) AS LOGIN_ID,
    (
    SELECT
        NAME
    FROM
        SGTROLE_M
    WHERE
        ID = (
        SELECT
            ROLE_ID
        FROM
            SGTROLEUSERREL_M
        WHERE
            USER_ID = A.UPDATED_BY)) AS ROLE,
    TRUNC(UPDATE_DATE) AS CREATE_DATE,
    MIN(CREATE_DATE) AS MIN_TIME_OF_THE_DAY,
    MAX(CREATE_DATE) AS MAX_TIME_OF_THE_DAY,
    'REVISION APPROVAL' AS ACTIVITY
FROM
    LTBILLREVISION_T A
WHERE
    TRUNC(UPDATE_DATE) BETWEEN TRUNC(SYSDATE-7) AND TRUNC(SYSDATE)
    AND NVL(UPDATED_BY,
    '0') != '0'
    AND UPDATED_BY IS NOT NULL
    AND RECORD_STATUS = 'ACTIVE'
GROUP BY
    UPDATED_BY,
    TRUNC(UPDATE_DATE)
UNION ALL
SELECT
    COUNT(CREATED_BY) TOTAL_NO_OF_ACTIVITIES,
    (
    SELECT
        NVL(FIRST_NAME,
        '')|| NVL(MIDDLE_NAME,
        '')|| NVL(LAST_NAME,
        '')
    FROM
        CMTEMPLOYEE_M
    WHERE
        USER_ID = A.CREATED_BY) CREATED_BY,
    (
    SELECT
        LOGIN_ID
    FROM
        CMTUSER_M
    WHERE
        ID = A.CREATED_BY ) AS LOGIN_ID,
    (
    SELECT
        NAME
    FROM
        SGTROLE_M
    WHERE
        ID = (
        SELECT
            ROLE_ID
        FROM
            SGTROLEUSERREL_M
        WHERE
            USER_ID = A.CREATED_BY)) AS ROLE ,
    TRUNC(CREATE_DATE) AS CREATE_DATE,
    MIN(CREATE_DATE) AS MIN_TIME_OF_THE_DAY,
    MAX(CREATE_DATE) AS MAX_TIME_OF_THE_DAY,
    'NEWSERVICE RELEASE' AS ACTIVITY
FROM
    NCTNEW_REGISTRATIONS_T A
WHERE
    TRUNC(CREATE_DATE) BETWEEN TRUNC(SYSDATE-7) AND TRUNC(SYSDATE)
    AND RECORD_STATUS = 'ACTIVE'
GROUP BY
    CREATED_BY,
    TRUNC(CREATE_DATE)
UNION ALL
SELECT
    COUNT(CREATED_BY) TOTAL_NO_OF_ACTIVITIES,
    (
    SELECT
        NVL(FIRST_NAME,
        '')|| NVL(MIDDLE_NAME,
        '')|| NVL(LAST_NAME,
        '')
    FROM
        CMTEMPLOYEE_M
    WHERE
        USER_ID = A.CREATED_BY) CREATED_BY,
    (
    SELECT
        LOGIN_ID
    FROM
        CMTUSER_M
    WHERE
        ID = A.CREATED_BY )AS LOGIN_ID,
    (
    SELECT
        NAME
    FROM
        SGTROLE_M
    WHERE
        ID = (
        SELECT
            ROLE_ID
        FROM
            SGTROLEUSERREL_M
        WHERE
            USER_ID = A.CREATED_BY)) AS ROLE,
    TRUNC(CREATE_DATE) AS CREATE_DATE,
    MIN(CREATE_DATE) AS MIN_TIME_OF_THE_DAY,
    MAX(CREATE_DATE) AS MAX_TIME_OF_THE_DAY,
    'OFFLINE PAYMENTS ENTRY' AS ACTIVITY
FROM
    PAYMENT_DETAILS_T A
WHERE
    TRUNC(CREATE_DATE) BETWEEN TRUNC(SYSDATE-7) AND TRUNC(SYSDATE)
    AND PRNO IS NULL
    AND RECORD_STATUS = 'ACTIVE'
GROUP BY
    CREATED_BY,
    TRUNC(CREATE_DATE);


-- DABS.LTENERGY_CHG_T source

CREATE VIEW DABS.LTENERGY_CHG_T AS
SELECT
    *
FROM
    CENTRAL_ALL.LTENERGY_CHG_T
WHERE
    PROVIENCE = '200';


-- DABS.LTTARIFF_PARA_T source

CREATE OR REPLACE
VIEW DABS.LTTARIFF_PARA_T AS
SELECT
    *
FROM
    CENTRAL_ALL.LTTARIFF_PARA_T
WHERE
    PROVIENCE = '200';


-- DABS.MTS_MTR_RDR_M source

CREATE VIEW DABS.MTS_MTR_RDR_M AS
SELECT
    *
FROM
    CENTRAL_ALL.MTS_MTR_RDR_M A
WHERE
    EXISTS (
    SELECT
        1
    FROM
        DABS.CMTOFFICE_M
    WHERE
        ID = A.OFFICE_ID);


-- DABS.MT_METERSTOCK source

CREATE OR REPLACE
VIEW DABS.MT_METERSTOCK AS
SELECT
    *
FROM
    CENTRAL_ALL.MT_METERSTOCK
WHERE
    SBRANCH_ID = '200';


-- DABS.NCTCATEGORY_M source

CREATE OR REPLACE
VIEW DABS.NCTCATEGORY_M AS (
SELECT
    *
FROM
    COMMON_USER.NCTCATEGORY_M
WHERE
    PARENT = '-2'
UNION
SELECT
    *
FROM
    COMMON_USER.NCTCATEGORY_M
WHERE
    ID IN (
    SELECT
        CATEGORY_ID
    FROM
        CENTRAL_ALL.LTTARIFF_PARA_T
    WHERE
        PROVIENCE = '200'));


-- DABS.POLE_M source

CREATE VIEW DABS.POLE_M AS
SELECT
    *
FROM
    CENTRAL_ALL.POLE_M A
WHERE
    EXISTS (
    SELECT
        1
    FROM
        DABS.CMTOFFICE_M
    WHERE
        ID = A.OFFICE_ID);


-- DABS.RBPVDATA source

CREATE OR REPLACE
VIEW DABS.RBPVDATA ( USER_ID,
ROLE_ID,
OBJECT_ID,
OBJECT_NAME,
PRIV_NAME,
OBJ_TYPE,
PARENT_OBJ_ID,
CREATED_BY,
CREATE_DATE,
UPDATED_BY,
UPDATE_DATE,
RECORD_STATUS,
MONTH,
YEAR,
DB_IP_ADDRESS,
SOURCE_OFFICE_ID,
TARGET_OFFICE_ID,
SCREEN_ID ) AS
SELECT
    A.USER_ID USER_ID,
    A.ROLE_ID ROLE_ID,
    C.ID AS OBJECT_ID,
    C.NAME AS OBJECT_NAME,
    E.NAME AS PRIVILEGE_NAME,
    D.TYPE OBJ_TYPE,
    F.PARENTOBJECT_ID PARENT_OBJ_ID,
    B.CREATED_BY,
    B.CREATE_DATE,
    B.UPDATED_BY,
    B.UPDATE_DATE,
    B.RECORD_STATUS,
    B.MONTH,
    B.YEAR,
    B.DB_IP_ADDRESS,
    B.SOURCE_OFFICE_ID,
    B.TARGET_OFFICE_ID,
    B.SCREEN_ID
FROM
    SGTROLEUSERREL_M A,
    SGTROLEOBJECTREL_M B,
    SGTOBJECT_M C,
    SGTOBJECTTYPE_M D,
    SGTPRIVILEGE_M E,
    SGTOBJECTREL_M F
WHERE
    D.ID = C.OBJECTTYPE_ID
    AND F.OBJECT_ID = B.OBJECT_ID
    AND C.ID = B.OBJECT_ID
    AND E.ID = B.PRIVILEGE_ID
    AND B.ROLE_ID = A.ROLE_ID
    AND A.RECORD_STATUS = 'ACTIVE'
    AND C.RECORD_STATUS = 'ACTIVE'
    AND E.RECORD_STATUS = 'ACTIVE'
    AND D.RECORD_STATUS = 'ACTIVE'
    AND B.RECORD_STATUS = 'ACTIVE'
    AND F.RECORD_STATUS = 'ACTIVE' WITH NO ROW MOVEMENT;


-- DABS.SGTROLEUSERREL_M source

CREATE OR REPLACE
VIEW DABS.SGTROLEUSERREL_M ( ID,
ROLE_ID,
USER_ID,
CREATED_BY,
CREATE_DATE,
UPDATED_BY,
UPDATE_DATE,
DB_IP_ADDRESS,
SOURCE_OFFICE_ID,
TARGET_OFFICE_ID,
RECORD_STATUS,
SCREEN_ID,
MONTH,
YEAR,
FLAG1,
FLAG2,
FLAG3,
FLAG4,
FLAG5,
CHECK_CONDITION,
MODULE_ID,
SUBMODULE_ID ) AS
SELECT
    ID,
    GROUPID,
    USERID,
    CREATED_BY,
    CREATE_DATE,
    UPDATED_BY,
    UPDATE_DATE,
    DB_IP_ADDRESS,
    SOURCE_OFFICE_ID,
    TARGET_OFFICE_ID,
    RECORD_STATUS,
    SCREEN_ID,
    MONTH,
    YEAR,
    FLAG1,
    FLAG2,
    FLAG3,
    FLAG4,
    FLAG5,
    CHECK_CONDITION,
    MODULE_ID,
    SUBMODULE_ID
FROM
    JWDB.DIR_USER_GROUP WITH NO ROW MOVEMENT;


-- DABS.SGTROLE_M source

CREATE OR REPLACE
VIEW DABS.SGTROLE_M ( ID,
NAME,
DESCRIPTION,
CREATED_BY,
CREATE_DATE,
UPDATED_BY,
UPDATE_DATE,
DB_IP_ADDRESS,
SOURCE_OFFICE_ID,
TARGET_OFFICE_ID,
RECORD_STATUS,
SCREEN_ID,
MONTH,
YEAR,
FLAG1,
FLAG2,
FLAG3,
FLAG4,
FLAG5,
CHECK_CONDITION,
MODULE_ID,
SUBMODULE_ID ) AS
SELECT
    ID,
    NAME,
    DESCRIPTION,
    CREATED_BY,
    CREATE_DATE,
    UPDATED_BY,
    UPDATE_DATE,
    DB_IP_ADDRESS,
    SOURCE_OFFICE_ID,
    TARGET_OFFICE_ID,
    RECORD_STATUS,
    SCREEN_ID,
    MONTH,
    YEAR,
    FLAG1,
    FLAG2,
    FLAG3,
    FLAG4,
    FLAG5,
    CHECK_CONDITION,
    MODULE_ID,
    SUBMODULE_ID
FROM
    JWDB.DIR_GROUP WITH NO ROW MOVEMENT;


-- DABS.SUMM_OFFWISE source

CREATE VIEW DABS.SUMM_OFFWISE ( NAME,
OFFICE_ID,
COLLECTION_DATE,
CONSUMER_ID,
CASH_NOS,
CASH_AMT,
CHEQUE_NOS,
CHEQUE_AMT,
DD_NOS,
DD_AMT,
CREDITCARD_NOS,
CREDITCARD_AMT,
TCHEQUE_NOS,
TCHEQUE_AMT ) AS
SELECT
    D.NAME,
    PD.OFFICE_ID,
    PM.COLLECTION_DATE,
    PD.CONSUMER_ID,
    SUM(DECODE(LM.PAYMENT_MODE, 'Cash', 1, 0)) CASH_NOS,
    SUM(DECODE(LM.PAYMENT_MODE, 'Cash',(NVL(PD.AMOUNT_PAID, 0)+ NVL(PD.ADVANCE_AMT, 0)), 0)) AS CASH_AMT,
    SUM(DECODE(LM.PAYMENT_MODE, 'Cheque', 1, 0)) CHEQUE_NOS,
    SUM(DECODE(LM.PAYMENT_MODE, 'Cheque',(NVL(PD.AMOUNT_PAID, 0)+ NVL(PD.ADVANCE_AMT, 0)), 0)) AS CHEQUE_AMT,
    SUM(DECODE(LM.PAYMENT_MODE, 'Demand Draft', 1, 0)) DD_NOS,
    SUM(DECODE(LM.PAYMENT_MODE, 'Demand Draft',(NVL(PD.AMOUNT_PAID, 0)+ NVL(PD.ADVANCE_AMT, 0)), 0)) AS DD_AMT,
    SUM(DECODE(LM.PAYMENT_MODE, 'Credit Card', 1, 0)) CREDITCARD_NOS,
    SUM(DECODE(LM.PAYMENT_MODE, 'Credit Card',(NVL(PD.AMOUNT_PAID, 0)+ NVL(PD.ADVANCE_AMT, 0)), 0)) AS CREDITCARD_AMT,
    SUM(DECODE(LM.PAYMENT_MODE, 'Treasury Cheque', 1, 0)) TCHEQUE_NOS,
    SUM(DECODE(LM.PAYMENT_MODE, 'Treasury Cheque',(NVL(PD.AMOUNT_PAID, 0)+ NVL(PD.ADVANCE_AMT, 0)), 0)) AS TCHEQUE_AMT
FROM
    PAYMENT_MASTER_T PM,
    PAYMENT_DETAILS_T PD,
    CMTOFFICE_M D ,
    LTPAYMENT_MODE_M LM
WHERE
    PM.ID = PD.PAYMENT_ID
    AND PM.PAYMENT_MODE_ID = LM.ID
    AND PD.OFFICE_ID = D.ID
    AND PM.RECORD_STATUS = 'ACTIVE'
    AND PD.RECORD_STATUS = 'ACTIVE'
    AND D.RECORD_STATUS = 'ACTIVE'
GROUP BY
    D.NAME,
    PD.OFFICE_ID,
    PM.COLLECTION_DATE,
    PD.CONSUMER_ID WITH NO ROW MOVEMENT;


-- DABS.ZONECYCLE_CONFIG_M source

CREATE VIEW DABS.ZONECYCLE_CONFIG_M AS
SELECT
    *
FROM
    CENTRAL_ALL.ZONECYCLE_CONFIG_M
WHERE
    RECORD_STATUS = 'ACTIVE'
    AND PROVINCE IN ( '200' ,
    '246');


-- DABS.ZONE_CYCLE_REL_M source

CREATE VIEW DABS.ZONE_CYCLE_REL_M AS
SELECT
    *
FROM
    CENTRAL_ALL.ZONE_CYCLE_REL_M
WHERE
    ZONE_ID IN (
    SELECT
        ID
    FROM
        DABS.ZONECYCLE_CONFIG_M
    WHERE
        RECORD_STATUS = 'ACTIVE'
        AND PROVINCE = '200');


-- DABS.ZONE_OFFICE_REL_M source

CREATE VIEW DABS.ZONE_OFFICE_REL_M AS
SELECT
    *
FROM
    CENTRAL_ALL.ZONE_OFFICE_REL_M
WHERE
    ZONE_ID IN (
    SELECT
        ID
    FROM
        DABS.ZONECYCLE_CONFIG_M
    WHERE
        RECORD_STATUS = 'ACTIVE'
        AND PROVINCE = '200');


-- DABS.ZONE_TARIFF_REL_CONGIF_M source

CREATE VIEW DABS.ZONE_TARIFF_REL_CONGIF_M AS
SELECT
    *
FROM
    CENTRAL_ALL.ZONE_TARIFF_REL_CONGIF_M
WHERE
    ZONE_ID IN (
    SELECT
        ID
    FROM
        DABS.ZONECYCLE_CONFIG_M
    WHERE
        RECORD_STATUS = 'ACTIVE'
        AND PROVINCE = '200');